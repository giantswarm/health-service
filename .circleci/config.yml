e2eTest: &e2eTest
    machine: true
    working_directory: /home/circleci/.go_workspace/src/github.com/giantswarm/health-service
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run:
        name: Get e2ectl binary
        command: |
          wget -q $(curl -sS https://api.github.com/repos/giantswarm/e2ectl/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
          chmod +x ./e2ectl
    # - run:
    #     name: Init cluster
    #     command: |
    #       ./e2ectl cluster create
    #       ls
    #       echo kubeconfig path $(./e2ectl kubeconfig path)
    #       mkdir test-kube-config
    #       cp $(./e2ectl kubeconfig path) test-kube-config/
    #       ls test-kube-config
    #       # cp $(./e2ectl kubeconfig path) ${E2E_TEST_DIR}/
    #       cat test-kube-config/kind-config-kind
    - run:
        name: Run test
        command: echo "A very important test indeed"
    
    - kube-orb/install-kubectl
    - run:
        name: Init cluster and run audit
        command: |
          ./e2ectl cluster create
          export KUBECONFIG=$(./e2ectl kubeconfig path)
          kubectl run --rm -i -t kube-bench-master --image=aquasec/kube-bench:latest \
          --restart=Never --overrides="{ \"apiVersion\":\"v1\", \
          \"spec\":{ \"hostPID\":true } }" -- master --version 1.15
    # 
    # - run:
    #     name: Run Docker CIS audit
    #     command: >
    #       kubectl run --rm -i --kubeconfig=test-kube-config/kind-config-kind 
    #       -t docker-bench-security 
    #       --image=docker/docker-bench-security 
    #       --restart=Never 

          # --overrides="{ \"apiVersion\":\"v1\", \"spec\":{ \"hostPID\":true,\"userNS\":\"host\", \"hostNetwork\":true, \"securityContext\":{ \"capabilities\":{ \"add\":[ \"audit_control\"]}},\"nodeSelector\":{ \"role\":\"master\" }, \"tolerations\":[ { \"key\":\"node-role.kubernetes.io/master\", \"operator\":\"Exists\", \"effect\":\"NoSchedule\" } ], \"volumes\":[ { \"name\":\"etc\", \"hostPath\":{ \"path\":\"/etc\", \"readOnly\":true } }, { \"name\":\"d-containerd\", \"hostPath\":{ \"path\":\"/usr/bin/docker-containerd\", \"readOnly\":true } }, { \"name\":\"d-runc\", \"hostPath\":{ \"path\":\"/usr/bin/docker-runc\", \"readOnly\":true } }, { \"name\":\"systemd\", \"hostPath\":{ \"path\":\"/usr/lib/systemd\", \"readOnly\":true } }, { \"name\":\"varlib\", \"hostPath\":{ \"path\":\"/var/lib\", \"readOnly\":true } }, { \"name\":\"dockersock\", \"hostPath\":{ \"path\":\"/var/run/docker.sock\", \"readOnly\":true } } ], \"containers\":[ { \"image\":\"docker/docker-bench-security\", \"name\":\"docker-bench-security\", \"command\":[ \"/bin/sh\"], \"args\":[ \"-c\", \"echo Starting && ./docker-bench-security.sh -l bench-out -e check_7 && cat bench-out.json\" ], \"volumeMounts\":[ { \"mountPath\":\"/etc\", \"name\":\"etc\" }, { \"mountPath\":\"/usr/bin/docker-containerd\", \"name\":\"d-containerd\" }, { \"mountPath\":\"/usr/bin/docker-runc\", \"name\":\"d-runc\" }, { \"mountPath\":\"/usr/lib/systemd\", \"name\":\"systemd\" }, { \"mountPath\":\"/var/lib\", \"name\":\"varlib\" },{ \"mountPath\":\"/var/run/docker.sock\", \"name\":\"dockersock\"}]}]}}" 
          # --env=DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST

    - run:
        name: Be surprised
        command: echo "Wow it worked"

    - run:
        name: Export logs
        command: |
          ./e2ectl logs export --logs-dir=kind/logs
        when: always

    - store_artifacts:
        path: kind/logs
        destination: logs

    - run:
        name: Finish with cleanup, no matter if the test succeeded or not
        command: ./e2ectl cluster delete
        when: always

version: 2.1
orbs:
  architect: giantswarm/architect@0.4.3
  kube-orb: circleci/kubernetes@0.10.1

jobs:
  build:
    machine: true
    steps:
    - checkout

    - run: |
        wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./architect
        ./architect version
    - run: ./architect build
    - store_test_results:
        path: /tmp/results
    # - run: ./architect publish --pipeline=false --channels=${CIRCLE_SHA1}
    # - run: |
    #     sed -i 's/version:.*/version: 1.0.0-'"${CIRCLE_SHA1}"'/' helm/chart-operator-chart/Chart.yaml
    #     ./architect publish --pipeline=false --channels=${CIRCLE_SHA1}
    - persist_to_workspace:
        root: .
        paths:
        - ./health-service
        - ./architect
  e2eTestBasicPR:
    environment:
      # E2E_TEST_DIR: "integration/test/chart/basic"
      E2E_TEST_DIR: "health-service"
    <<: *e2eTest

workflows:
  build:
    jobs:
      - build:
          filters:
            branches:
              only: test-ci-automation
            # tags:
            #   only: /^v.*/
      - e2eTestBasicPR:
          filters:
            branches:
              only: test-ci-automation
          requires:
          - build

# e2eTest: &e2eTest
#     machine: true
#     working_directory: /home/circleci/.go_workspace/src/github.com/giantswarm/chart-operator
#     steps:
#     - checkout

#     - attach_workspace:
#         at: .

#     - run:
#         name: Get e2ectl binary
#         command: |
#           wget -q $(curl -sS https://api.github.com/repos/giantswarm/e2ectl/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
#           chmod +x ./e2ectl
#     - run:
#         name: Init cluster
#         command: |
#           ./e2ectl cluster create
#           cp $(./e2ectl kubeconfig path) ${E2E_TEST_DIR}/kubeconfig
#     - run:
#         name: Run test
#         command: |
#           docker run --rm --network host \
#             -v $(pwd)/${E2E_TEST_DIR}:/e2e \
#             -v $(pwd):/go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
#             -e E2E_KUBECONFIG=/e2e/kubeconfig \
#             -e CIRCLE_SHA1=${CIRCLE_SHA1} \
#             -e GITHUB_BOT_TOKEN=${GITHUB_BOT_TOKEN} \
#             -e E2E_TESTED_VERSION=${E2E_TESTED_VERSION} \
#             -w /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
#             golang:1 go test -v -tags k8srequired ./${E2E_TEST_DIR}/
#     - run:
#         name: Export logs
#         command: |
#           ./e2ectl logs export --logs-dir=kind/logs
#         when: always

#     - store_artifacts:
#         path: kind/logs
#         destination: logs

#     - run:
#         name: Finish with cleanup, no matter if the test succeeded or not
#         command: ./e2ectl cluster delete
#         when: always

# version: 2.1
# orbs:
#   architect: giantswarm/architect@0.4.3

# jobs:
#   build:
#     machine: true
#     steps:
#     - checkout

#     - run: |
#         wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
#         chmod +x ./architect
#         ./architect version
#     - run: ./architect build
#     - store_test_results:
#         path: /tmp/results
#     - run: ./architect publish --pipeline=false --channels=${CIRCLE_SHA1}
#     - run: |
#         sed -i 's/version:.*/version: 1.0.0-'"${CIRCLE_SHA1}"'/' helm/chart-operator-chart/Chart.yaml
#         ./architect publish --pipeline=false --channels=${CIRCLE_SHA1}
#     - persist_to_workspace:
#         root: .
#         paths:
#         - ./chart-operator
#         - ./architect

#   e2eTestChartBasicPR:
#     environment:
#       E2E_TEST_DIR: "integration/test/chart/basic"
#     <<: *e2eTest
  
  # e2eTestChartBasicMaster:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chart/basic"
  #   <<: *e2eTest

  # e2eTestChartConfigCurBasicPR:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/basic"
  #     E2E_TESTED_VERSION: "current"
  #   <<: *e2eTest

  # e2eTestChartConfigCurBasicMaster:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/basic"
  #     E2E_TESTED_VERSION: "current"
  #   <<: *e2eTest

  # e2eTestChartConfigWIPBasicPR:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/basic"
  #     E2E_TESTED_VERSION: "wip"
  #   <<: *e2eTest

  # e2eTestChartConfigWIPBasicMaster:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/basic"
  #     E2E_TESTED_VERSION: "wip"
  #   <<: *e2eTest

  # e2eTestChartConfigCurChartValuesPR:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/chartvalues"
  #     E2E_TESTED_VERSION: "current"
  #   <<: *e2eTest

  # e2eTestChartConfigCurChartValuesMaster:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/chartvalues"
  #     E2E_TESTED_VERSION: "current"
  #   <<: *e2eTest

  # e2eTestChartConfigWIPChartValuesPR:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/chartvalues"
  #     E2E_TESTED_VERSION: "wip"
  #   <<: *e2eTest

  # e2eTestChartConfigWIPChartValuesMaster:
  #   environment:
  #     E2E_TEST_DIR: "integration/test/chartconfig/chartvalues"
  #     E2E_TESTED_VERSION: "wip"
  #   <<: *e2eTest

  # deploy:
  #   machine: true
  #   steps:
  #   - checkout

  #   - attach_workspace:
  #       at: .

  #   - run: ./architect deploy

  #   - run:
  #       name: publish to beta
  #       command: ./architect publish
  #   - run: |
  #       sed -i 's/version:.*/version: 1.0.0-'"${CIRCLE_SHA1}"'/' helm/chart-operator-chart/Chart.yaml
  #       ./architect publish
  
  # publish_to_stable:
  #   machine: true
  #   steps:
  #   - checkout

  #   - attach_workspace:
  #       at: .

  #   - run: ./architect publish --stable

# workflows:
#   build:
#     jobs:
#       - build:
#           filters:
#             tags:
#               only: /^v.*/

      # - architect/push-to-docker:
      #     name: push-chart-operator-to-quay
      #     image: "quay.io/giantswarm/chart-operator"
      #     username_envar: "QUAY_USERNAME"
      #     password_envar: "QUAY_PASSWORD"
      #     requires:
      #       - build
      #     # Needed to trigger job also on git tag.
      #     filters:
      #       tags:
      #         only: /^v.*/

      # - architect/push-to-docker:
      #     name: push-chart-operator-to-aliyun
      #     image: "registry-intl.cn-shanghai.aliyuncs.com/giantswarm/chart-operator"
      #     username_envar: "ALIYUN_USERNAME"
      #     password_envar: "ALIYUN_PASSWORD"
      #     requires:
      #       - build
      #     # Needed to trigger job only on git tag.
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /^v.*/

      # - architect/push-to-app-catalog:
      #     name: push-chart-operator-to-app-catalog
      #     app_catalog: "default-catalog"
      #     app_catalog_test: "default-test-catalog"
      #     chart: "chart-operator"
      #     requires:
      #       - push-chart-operator-to-quay
      #     # Needed to trigger job also on git tag.
      #     filters:
      #       tags:
      #         only: /^v.*/

      # - e2eTestChartBasicPR:
      #     requires:
      #     - build

      # - e2eTestChartBasicMaster:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - build

      # - e2eTestChartConfigCurBasicPR:
      #     requires:
      #     - build

      # - e2eTestChartConfigCurBasicMaster:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - build

      # - e2eTestChartConfigWIPBasicPR:
      #     requires:
      #     - build

      # - e2eTestChartConfigWIPBasicMaster:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - build

      # - e2eTestChartConfigCurChartValuesPR:
      #     requires:
      #     - build

      # - e2eTestChartConfigCurChartValuesMaster:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - build

      # - e2eTestChartConfigWIPChartValuesPR:
      #     requires:
      #     - build

      # - e2eTestChartConfigWIPChartValuesMaster:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - build

      # - deploy:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - e2eTestChartBasicMaster
      #     - e2eTestChartConfigCurBasicMaster
      #     - e2eTestChartConfigWIPBasicMaster
      #     - e2eTestChartConfigCurChartValuesMaster
      #     - e2eTestChartConfigWIPChartValuesMaster

      # - publish_to_stable:
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #     - deploy



# version: 2.1
# orbs:
#   architect: giantswarm/architect@0.4.1

# workflows:
#   go-build:
#     jobs:
#       - architect/go-build:
#           name: go-build-health-service
#           binary: health-service
#           # Needed to trigger job also on git tag.
#           filters:
#             tags:
              # only: /^v.*/